// --- diet-fitness-frontend/app/plan/page.tsx ---
'use client';

import React, { useState, useEffect } from 'react';
import { Grid, Container, Typography, Box, Paper, TextField, Button, CircularProgress } from '@mui/material';
import ArticleIcon from '@mui/icons-material/Article';
import { useAuth } from '../../contexts/AuthContext';
import { useRouter } from 'next/navigation'; // Corrected: using next/navigation for App Router

interface FitnessPlan {
  id?: string; // Optional ID for existing plans
  type: string; // "Diet" or "Workout"
  title: string;
  description: string;
  icon?: string; // Client-side added for display, not from backend directly
}

// Reusable component for displaying a plan card
function PlanCard({ type, title, description, icon }: FitnessPlan) {
  return (
    <Grid item xs={12} sm={6} md={6}>
      <Paper elevation={3} sx={{ p: 3, borderRadius: 2, height: '100%', display: 'flex', flexDirection: 'column', transition: 'transform 0.2s ease-in-out', '&:hover': { transform: 'translateY(-5px)' } }}>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <Typography variant="h4" sx={{ mr: 1 }}>{icon}</Typography>
          <Typography variant="h6" component="h2" gutterBottom sx={{ fontWeight: 600, color: 'primary.dark' }}>
            {title}
          </Typography>
        </Box>
        <Typography variant="body2" color="text.secondary" sx={{ lineHeight: 1.6, flexGrow: 1 }}>
          {description}
        </Typography>
        <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end', alignItems: 'center', borderTop: '1px solid', borderColor: 'divider', pt: 1 }}>
          <Typography variant="caption" color="text.secondary">
            Generated by FitPlan AI
          </Typography>
        </Box>
      </Paper>
    </Grid>
  );
}

export default function PlanPage() {
  const { isAuthenticated, authenticatedFetch, loading: authLoading } = useAuth();
  const router = useRouter();

  const [userPrompt, setUserPrompt] = useState('');
  const [generatedPlans, setGeneratedPlans] = useState<FitnessPlan[]>([]);
  const [fetchedPlans, setFetchedPlans] = useState<FitnessPlan[]>([]);
  const [loadingGenerate, setLoadingGenerate] = useState(false);
  const [loadingFetch, setLoadingFetch] = useState(true);
  const [errorGenerate, setErrorGenerate] = useState('');
  const [errorFetch, setErrorFetch] = useState('');

  useEffect(() => {
    // Wait for AuthContext to finish its initial loading
    if (!authLoading) {
      if (!isAuthenticated) {
        console.log('Plan: Not authenticated, redirecting to login.');
        router.push('/login');
        return;
      }
      // Fetch existing plans only if authenticated
      fetchExistingPlans();
    }
  }, [isAuthenticated, authLoading, authenticatedFetch, router]); // Dependencies

  const fetchExistingPlans = async () => {
    setLoadingFetch(true);
    setErrorFetch('');
    try {
      console.log('Plan: Fetching existing plans...');
      const response = await authenticatedFetch('/plan');
      const data = await response.json();
      // Add icons based on plan type for display
      const plansWithIcons = (data.plans || []).map((plan: any) => ({
        ...plan,
        icon: plan.type === 'Diet' ? 'üçΩÔ∏è' : 'üèãÔ∏è'
      }));
      setFetchedPlans(plansWithIcons);
      console.log('Plan: Existing plans fetched:', plansWithIcons);
    } catch (err: any) {
      console.error('Plan: Error fetching existing plans:', err.message);
      setErrorFetch(err.message || 'Failed to load existing plans.');
    } finally {
      setLoadingFetch(false);
    }
  };

  const handleGeneratePlan = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrorGenerate('');
    setGeneratedPlans([]); // Clear previous generated plans
    setLoadingGenerate(true);

    if (!userPrompt.trim()) {
      setErrorGenerate('Please enter a prompt for the plan generation.');
      setLoadingGenerate(false);
      return;
    }

    try {
      console.log('Plan: Generating new plan...');
      const response = await authenticatedFetch('/generate-plan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ user_prompt: userPrompt }),
      });
      const data = await response.json();
      // Assuming backend returns an array of plans
      const plansWithIcons = (data.plans || []).map((plan: any) => ({
        ...plan,
        icon: plan.type === 'Diet' ? 'üçΩÔ∏è' : 'üèãÔ∏è'
      }));
      setGeneratedPlans(plansWithIcons); // Show newly generated plans
      setUserPrompt(''); // Clear prompt input
      // Optionally, refetch existing plans to include the new one
      fetchExistingPlans();
      console.log('Plan: Plan generated and fetched:', plansWithIcons);
    } catch (err: any) {
      console.error('Plan: Error generating plan:', err.message);
      setErrorGenerate(err.message || 'Failed to generate plan.');
    } finally {
      setLoadingGenerate(false);
    }
  };

  // Display loading for initial fetch or auth loading
  if (loadingFetch || authLoading) {
    return (
      <Container sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 'calc(100vh - 64px)' }}>
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>Loading plans...</Typography>
      </Container>
    );
  }

  // Display error for initial fetch
  if (errorFetch) {
    return (
      <Container sx={{ mt: 8, textAlign: 'center' }}>
        <Typography color="error" variant="h6">Error loading plans: {errorFetch}</Typography>
        <Button onClick={() => window.location.reload()} sx={{ mt: 2 }}>Try Again</Button>
      </Container>
    );
  }

  return (
    <Container sx={{ mt: 8, mb: 4, px: 2 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 4 }}>
        <ArticleIcon color="primary" sx={{ fontSize: 40, mr: 2 }} />
        <Typography variant="h4" component="h1">
          Your Personalized Plans
        </Typography>
      </Box>
      <Typography variant="body1" sx={{ mb: 4, color: 'text.secondary' }}>
        Here are the diet and workout plans tailored just for you.
      </Typography>

      {/* Section for generating new plans */}
      <Box sx={{ mb: 5, p: 3, border: '1px solid', borderColor: 'divider', borderRadius: 2 }}>
        <Typography variant="h5" gutterBottom>Generate New Plan</Typography>
        <form onSubmit={handleGeneratePlan}>
          {errorGenerate && <Typography color="error" variant="body2" sx={{ mb: 2 }}>{errorGenerate}</Typography>}
          <TextField
            label="Tell us your goals"
            multiline
            rows={4}
            fullWidth
            variant="outlined"
            placeholder="e.g., I want to lose 10kg, build muscle, and improve endurance. My current weight is 70kg."
            value={userPrompt}
            onChange={(e) => setUserPrompt(e.target.value)}
            sx={{ mb: 2 }}
            disabled={loadingGenerate}
          />
          <Button
            type="submit"
            variant="contained"
            color="secondary"
            disabled={loadingGenerate}
            startIcon={loadingGenerate ? <CircularProgress size={20} color="inherit" /> : null}
          >
            {loadingGenerate ? 'Generating...' : 'Generate New Plan'}
          </Button>
        </form>

        {generatedPlans.length > 0 && (
          <Box sx={{ mt: 4 }}>
            <Typography variant="h5" gutterBottom>Newly Generated Plans:</Typography>
            <Grid container spacing={4}>
              {generatedPlans.map((plan, index) => (
                <PlanCard key={index} {...plan} />
              ))}
            </Grid>
          </Box>
        )}
      </Box>

      {/* Section for displaying existing plans */}
      <Typography variant="h5" gutterBottom sx={{ mt: 4 }}>Your Existing Plans:</Typography>
      <Grid container spacing={4}>
        {fetchedPlans.length > 0 ? (
          fetchedPlans.map((plan, index) => (
            <PlanCard key={index} {...plan} />
          ))
        ) : (
          <Grid item xs={12}>
            <Typography variant="body1" color="text.secondary">No existing plans available. Generate one above!</Typography>
          </Grid>
        )}
      </Grid>
    </Container>
  );
}